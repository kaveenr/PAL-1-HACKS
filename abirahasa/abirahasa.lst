ca65 V2.18 - N/A
Main file   : abirahasa.s
Current file: abirahasa.s

000000r 1               ; # # # # # # # # # # # # #
000000r 1               ; # Kaveen Rodrigo, 2022  #
000000r 1               ; # ukr.lk                #
000000r 1               ; # # # # # # # # # # # # #
000000r 1               
000000r 1               ; Abirahasa Game Interpreter
000000r 1               ; "Abirahasa" - Mystery in Sinhala
000000r 1               
000000r 1               ; Functionality Of Game Engine
000000r 1               ; Scene
000000r 1               ;   - Has Text Content
000000r 1               ;   - Can Go Four Directions
000000r 1               ;   - Can backtrack flag
000000r 1               ;   - 8 Unqiue Item Pickup
000000r 1               ;   - Reusuable scenarios
000000r 1               
000000r 1               ; Game State            Supported Verbs
000000r 1               ;   - Previous Scene        - GO
000000r 1               ;   - Current Scene         - TAKE
000000r 1               ;   - Pickups               - USE
000000r 1               ;
000000r 1               
000000r 1                   .setcpu "6502"
000000r 1               
000000r 1               ;
000000r 1               ; Constants
000000r 1               ;
000000r 1               
000000r 1               ; KIM-1 Rom Routine Addresses
000000r 1               
000000r 1                   kOUTCH  =   $1EA0
000000r 1                   kGETCH  =   $1E5A
000000r 1                   kRST    =   $1C22
000000r 1               
000000r 1               ; Zero Page Variables
000000r 1               
000000r 1                   SAVEA   =   $01
000000r 1                   SAVEX   =   $02
000000r 1                   SAVEY   =   $03
000000r 1               
000000r 1                   PRINTP  =   $04         ; 2 byte print pointer
000000r 1                   PRINTE  =   $06         ; 2 byte of print end
000000r 1                   CVERB   =   $08         ; 1 byte selected verb
000000r 1                   CNOUN   =   $09         ; 1 byte selected noun
000000r 1                   INWORD  =   $0A         ; String Input Buffer
000000r 1               
000000r 1                   ; Game State Variables
000000r 1               
000000r 1                   GAMEP   =   $30         ; 2 byte game pointer
000000r 1                   CPICK   =   $32         ; 1 byte char of pickup
000000r 1               
000000r 1                   ; Scene Defintion
000000r 1               
000000r 1                   ZGAME   =   $33         ; Shortcut ADDR for below
000000r 1               
000000r 1                   GCADD   =   ZGAME       ; GO Adress Common High byte
000000r 1                   GNADD   =   ZGAME+1     ; GO Adress North Low byte
000000r 1                   GEADD   =   ZGAME+2     ; GO Adress East Low byte
000000r 1                   GSADD   =   ZGAME+3     ; GO Adress South Low byte
000000r 1                   GWADD   =   ZGAME+4     ; GO Adress West Low byte
000000r 1                   GPICK   =   ZGAME+5     ; Avaiable Pickup
000000r 1                   GGDIR   =   ZGAME+6     ; Gated Direction
000000r 1                   GGPICK  =   ZGAME+7     ; Gated Direction Key Pick
000000r 1                   GDESC   =   ZGAME+8     ; 2 byte address of description
000000r 1                   GGERR   =   ZGAME+10    ; 2 byte address of error
000000r 1               
000000r 1               ; Constants
000000r 1               
000000r 1                   GRLEN  =   11           ; len in bytes of record
000000r 1               
000000r 1                   ; ASCII
000000r 1               
000000r 1                   CR      =   $0D         ; Carriage Return
000000r 1                   LF      =   $0A         ; Line Feed
000000r 1                   SP      =   $20         ; Space
000000r 1               
000000r 1               ;
000000r 1               ; Program Entrypoint
000000r 1               ;
000000r 1               
000000r 1                   .org    $0200
000200  1               
000200  1  D8           init:       cld             ; Clear Decimal Mode
000201  1  A2 C2                    ldx #<s_hello   ; Show Welcome Message
000203  1  A0 03                    ldy #>s_hello
000205  1  20 82 03                 jsr PutStr
000208  1  A9 66                    lda #<game      ; Set Game Scene Pointer
00020A  1  85 30                    sta GAMEP
00020C  1  A9 04                    lda #>game
00020E  1  85 31                    sta GAMEP+1
000210  1  A9 00                    lda #0          ; Clear Game Vars
000212  1  85 32                    sta CPICK
000214  1               
000214  1  A0 00        describe:   ldy #0          ; Copy of scene to ZP
000216  1  B1 30        @loop:      lda (GAMEP), y
000218  1  99 33 00                 sta ZGAME, y
00021B  1  C8                       iny
00021C  1  C0 0C                    cpy #GRLEN+1
00021E  1  D0 F6                    bne @loop
000220  1               
000220  1  20 61 03     @endloop:   jsr PutCRLF     ; Print Description
000223  1  A6 3B                    ldx GDESC
000225  1  A4 3C                    ldy GDESC+1
000227  1  20 82 03                 jsr PutStr
00022A  1               
00022A  1                           ; Prompt Verb
00022A  1                           ; Store Valid Verb First Char to CVERB
00022A  1               
00022A  1  20 61 03     prompt:     jsr PutCRLF
00022D  1  A2 FB                    ldx #<s_prompt
00022F  1  A0 03                    ldy #>s_prompt
000231  1  20 82 03                 jsr PutStr
000234  1               
000234  1  20 A2 03                 jsr GetWord     ; Get Word
000237  1  A5 0A                    lda INWORD
000239  1               
000239  1  C9 47                    cmp #'G'        ; Check if valid verb
00023B  1  F0 20                    beq @store
00023D  1  C9 54                    cmp #'T'
00023F  1  F0 1C                    beq @store
000241  1  C9 55                    cmp #'U'
000243  1  F0 18                    beq @store
000245  1  C9 51                    cmp #'Q'
000247  1  F0 36                    beq hault
000249  1               
000249  1  20 61 03     @failed:    jsr PutCRLF     ; Notify Bad Verb
00024C  1               
00024C  1  A2 0A                    ldx #<INWORD
00024E  1  A0 00                    ldy #>INWORD
000250  1  20 82 03                 jsr PutStr
000253  1               
000253  1  A2 FF                    ldx #<s_err1
000255  1  A0 03                    ldy #>s_err1
000257  1  20 82 03                 jsr PutStr
00025A  1               
00025A  1  4C 2A 02                 jmp prompt      ; Return To Prompt
00025D  1               
00025D  1  A5 0A        @store:     lda INWORD      ; Store first char of verb
00025F  1  85 08                    sta CVERB
000261  1               
000261  1                           ; Prompt Noun
000261  1                           ; Store Noun First Char to CNOUN
000261  1               
000261  1  20 A2 03     prompt_n:   jsr GetWord     ; Get Word
000264  1  A5 0A                    lda INWORD
000266  1  85 09                    sta CNOUN
000268  1               
000268  1  20 61 03                 jsr PutCRLF
00026B  1               
00026B  1                           ; Switch Based On Noun
00026B  1               
00026B  1  A5 08                    lda CVERB
00026D  1  C9 47                    cmp #'G'
00026F  1  F0 14                    beq handle_g
000271  1  C9 54                    cmp #'T'
000273  1  F0 07                    beq @go_t
000275  1  C9 55                    cmp #'U'
000277  1  F0 00                    beq @go_u
000279  1               
000279  1  4C 22 03     @go_u:      jmp handle_u
00027C  1  4C F4 02     @go_t:      jmp handle_t
00027F  1               
00027F  1  20 61 03     hault:      jsr PutCRLF
000282  1  4C 22 1C                 jmp kRST
000285  1               
000285  1                           ;
000285  1                           ; Handle Go
000285  1                           ;
000285  1               
000285  1  A6 09        handle_g:   ldx CNOUN
000287  1  E0 4E                    cpx #'N'
000289  1  D0 05                    bne @match_e
00028B  1  A5 34                    lda GNADD
00028D  1  4C BC 02                 jmp @validnoun
000290  1  E0 45        @match_e:   cpx #'E'
000292  1  D0 05                    bne @match_s
000294  1  A5 35                    lda GEADD
000296  1  4C BC 02                 jmp @validnoun
000299  1  E0 53        @match_s:   cpx #'S'
00029B  1  D0 05                    bne @match_w
00029D  1  A5 36                    lda GSADD
00029F  1  4C BC 02                 jmp @validnoun
0002A2  1  E0 57        @match_w:   cpx #'W'
0002A4  1  D0 05                    bne @fail
0002A6  1  A5 37                    lda GWADD
0002A8  1  4C BC 02                 jmp @validnoun
0002AB  1               
0002AB  1  A2 0A        @fail:      ldx #<INWORD    ; Verbose Wrong Noun
0002AD  1  A0 00                    ldy #>INWORD
0002AF  1  20 82 03                 jsr PutStr
0002B2  1  A2 14                    ldx #<s_err2
0002B4  1  A0 04                    ldy #>s_err2
0002B6  1  20 82 03                 jsr PutStr
0002B9  1  4C 2A 02                 jmp prompt
0002BC  1               
0002BC  1  C9 00        @validnoun: cmp #0          ; Check if allowed
0002BE  1  D0 14                    bne @valid
0002C0  1               
0002C0  1  20 61 03                 jsr PutCRLF     ; Show invalid choice
0002C3  1  A2 31                    ldx #<s_err3
0002C5  1  A0 04                    ldy #>s_err3
0002C7  1  20 82 03                 jsr PutStr
0002CA  1  A2 0A                    ldx #<INWORD
0002CC  1  A0 00                    ldy #>INWORD
0002CE  1  20 82 03                 jsr PutStr
0002D1  1  4C 2A 02                 jmp prompt
0002D4  1               
0002D4  1  E4 39        @valid:     cpx GGDIR       ; check if direc is gated
0002D6  1  D0 13                    bne @move
0002D8  1               
0002D8  1  A6 3A                    ldx GGPICK      ; check if gate is fullfilled
0002DA  1  E4 32                    cpx CPICK
0002DC  1  F0 0D                    beq @move
0002DE  1               
0002DE  1  20 61 03                 jsr PutCRLF     ; Show gate fail
0002E1  1  A6 3D                    ldx GGERR
0002E3  1  A4 3E                    ldy GGERR+1
0002E5  1  20 82 03                 jsr PutStr
0002E8  1               
0002E8  1  4C 2A 02                 jmp prompt
0002EB  1               
0002EB  1  85 30        @move:      sta GAMEP
0002ED  1  A5 33                    lda GCADD
0002EF  1  85 31                    sta GAMEP+1
0002F1  1  4C 14 02                 jmp describe
0002F4  1               
0002F4  1                           ;
0002F4  1                           ; Handle Take
0002F4  1                           ;
0002F4  1               
0002F4  1  A5 38        handle_t:   lda GPICK
0002F6  1  C9 00                    cmp #0
0002F8  1  F0 17                    beq @fail
0002FA  1  C5 0A                    cmp INWORD
0002FC  1  D0 13                    bne @fail
0002FE  1  85 32                    sta CPICK
000300  1               
000300  1  A2 29                    ldx #<s_verb2
000302  1  A0 04                    ldy #>s_verb2
000304  1  20 82 03                 jsr PutStr
000307  1  A2 0A                    ldx #<INWORD
000309  1  A0 00                    ldy #>INWORD
00030B  1  20 82 03                 jsr PutStr
00030E  1  4C 2A 02                 jmp prompt
000311  1               
000311  1  A2 3B        @fail:      ldx #<s_err4
000313  1  A0 04                    ldy #>s_err4
000315  1  20 82 03                 jsr PutStr
000318  1  A2 0A                    ldx #<INWORD
00031A  1  A0 00                    ldy #>INWORD
00031C  1  20 82 03                 jsr PutStr
00031F  1  4C 2A 02                 jmp prompt
000322  1               
000322  1                           ;
000322  1                           ; Handle Use
000322  1                           ;
000322  1               
000322  1  A5 32        handle_u:   lda CPICK       ; Check if a pickup is present
000324  1  C9 00                    cmp #0
000326  1  F0 0B                    beq @empty
000328  1  C5 3A                    cmp GGPICK      ; check if pickup is usable
00032A  1  D0 18                    bne @invalid
00032C  1               
00032C  1  A5 39                    lda GGDIR
00032E  1  85 09                    sta CNOUN
000330  1  4C 85 02                 jmp handle_g
000333  1               
000333  1  A2 47        @empty:     ldx #<s_err5
000335  1  A0 04                    ldy #>s_err5
000337  1  20 82 03                 jsr PutStr
00033A  1  A2 0A                    ldx #<INWORD
00033C  1  A0 00                    ldy #>INWORD
00033E  1  20 82 03                 jsr PutStr
000341  1  4C 2A 02                 jmp prompt
000344  1               
000344  1  A2 59        @invalid:   ldx #<s_err6
000346  1  A0 04                    ldy #>s_err6
000348  1  20 82 03                 jsr PutStr
00034B  1  A2 0A                    ldx #<INWORD
00034D  1  A0 00                    ldy #>INWORD
00034F  1  20 82 03                 jsr PutStr
000352  1  4C 2A 02                 jmp prompt
000355  1               
000355  1               ;
000355  1               ; TTY IO Routines
000355  1               ;
000355  1               
000355  1  85 01        PutChar:    sta SAVEA
000357  1  84 03                    sty SAVEY
000359  1  20 A0 1E                 jsr kOUTCH
00035C  1  A4 03                    ldy SAVEY
00035E  1  A5 01                    lda SAVEA
000360  1  60                       rts
000361  1               
000361  1  85 01        PutCRLF:    sta SAVEA
000363  1  A9 0D                    lda #CR
000365  1  20 55 03                 jsr PutChar
000368  1  A9 0A                    lda #LF
00036A  1  20 55 03                 jsr PutChar
00036D  1  A5 01                    lda SAVEA
00036F  1  60                       rts
000370  1               
000370  1  84 03        PutPtrSTR:  sty SAVEY
000372  1  A0 00                    ldy #0
000374  1  B1 04        @loop:      lda (PRINTP), y
000376  1  F0 07                    beq @stop
000378  1  20 55 03                 jsr PutChar
00037B  1  C8                       iny
00037C  1  4C 74 03                 jmp @loop
00037F  1  A4 03        @stop:      ldy SAVEY
000381  1  60                       rts
000382  1               
000382  1  8A           PutStr:     txa
000383  1  85 04                    sta PRINTP
000385  1  98                       tya
000386  1  85 05                    sta PRINTP+1
000388  1  20 70 03                 jsr PutPtrSTR
00038B  1  60                       rts
00038C  1               
00038C  1  84 03        GetChar:    sty SAVEY
00038E  1  20 5A 1E                 jsr kGETCH
000391  1  20 97 03                 jsr ToUpper
000394  1  A4 03                    ldy SAVEY
000396  1  60                       rts
000397  1               
000397  1  C9 61        ToUpper:    cmp #'a'
000399  1  30 06                    bmi @skip
00039B  1  C9 7B                    cmp #'z'+1
00039D  1  10 02                    bpl @skip
00039F  1  29 DF                    and #%11011111
0003A1  1  60           @skip:      rts
0003A2  1               
0003A2  1  86 02        GetWord:    stx SAVEX
0003A4  1  85 01                    sta SAVEA
0003A6  1  A2 00                    ldx #0
0003A8  1  20 8C 03     @loop:      jsr GetChar
0003AB  1  C9 20                    cmp #SP
0003AD  1  F0 0A                    beq @stop
0003AF  1  C9 0D                    cmp #CR
0003B1  1  F0 06                    beq @stop
0003B3  1  95 0A                    sta INWORD,X
0003B5  1  E8                       inx
0003B6  1  4C A8 03                 jmp @loop
0003B9  1  A9 00        @stop:      lda #0
0003BB  1  95 0A                    sta INWORD,X
0003BD  1  A6 02                    ldx SAVEX
0003BF  1  A5 01                    lda SAVEA
0003C1  1  60                       rts
0003C2  1               
0003C2  1               ;
0003C2  1               ; String/Char Constants
0003C2  1               ;
0003C2  1               
0003C2  1  0D 0A 41 62  s_hello:    .byte CR,LF,"Abirahasa Game Interpreter"
0003C6  1  69 72 61 68  
0003CA  1  61 73 61 20  
0003DE  1  0D 0A 62 79              .byte CR,LF,"by Kaveen Rodrigo (2022)",CR,LF,0
0003E2  1  20 4B 61 76  
0003E6  1  65 65 6E 20  
0003FB  1  0D 0A 3E 00  s_prompt:   .byte CR,LF,">",0
0003FF  1  20 69 73 20  s_err1:     .byte " is not a valid verb",0
000403  1  6E 6F 74 20  
000407  1  61 20 76 61  
000414  1  20 69 73 20  s_err2:     .byte " is not a valid noun",0
000418  1  6E 6F 74 20  
00041C  1  61 20 76 61  
000429  1  54 61 6B 69  s_verb2:    .byte "Taking ",0
00042D  1  6E 67 20 00  
000431  1  43 61 6E 27  s_err3:     .byte "Can't go ",0
000435  1  74 20 67 6F  
000439  1  20 00        
00043B  1  43 61 6E 27  s_err4:     .byte "Can't take ",0
00043F  1  74 20 74 61  
000443  1  6B 65 20 00  
000447  1  59 6F 75 20  s_err5:     .byte "You don't have a ",0
00044B  1  64 6F 6E 27  
00044F  1  74 20 68 61  
000459  1  43 61 6E 27  s_err6:     .byte "Can't use a ",0
00045D  1  74 20 75 73  
000461  1  65 20 61 20  
000466  1               
000466  1               
000466  1               ;
000466  1               ; Game Data
000466  1               ;
000466  1                           ;      Ca    Na    Ea    Sa    Wa    Pc    Gd    Gp     Desc ptr.
000466  1  04 70 00 00  game:       .byte (>@1),(<@1),(0  ),(0  ),(0  ),(0  ),(0  ),(0  ),  (<@t1),(>@t1)
00046A  1  00 00 00 00  
00046E  1  90 04        
000470  1  04 86 00 00  @1:         .byte (>@1),(<@3),(0  ),(0  ),(<@2),(0  ),('N'),('K'),  (<@t2),(>@t2), (<@e1),(>@e1)
000474  1  7C 00 4E 4B  
000478  1  18 05 E5 06  
00047C  1  04 00 70 00  @2:         .byte (>@1),(0  ),(<@1),(0  ),(0  ),('K'),(0  ),(0  ),  (<@t3),(>@t3)
000480  1  00 4B 00 00  
000484  1  B2 05        
000486  1  00 00 00 00  @3:         .byte (0  ),(0  ),(0  ),(0  ),(0  ),(0  ),(0  ),(0  ),  (<@t4),(>@t4)
00048A  1  00 00 00 00  
00048E  1  76 06        
000490  1               
000490  1  59 6F 75 27  @t1:        .byte "You're at the side of an empty road, north of you is a foot path..."
000494  1  72 65 20 61  
000498  1  74 20 74 68  
0004D3  1  0D 0A 54 68              .byte CR,LF,"There is a sign that says 'Welcome To Abirahasa' next to the path.",0
0004D7  1  65 72 65 20  
0004DB  1  69 73 20 61  
000518  1               
000518  1  59 6F 75 20  @t2:        .byte "You walk along, to find a clearing with an old house, it looks uninhabited."
00051C  1  77 61 6C 6B  
000520  1  20 61 6C 6F  
000563  1  0D 0A 53 68              .byte CR,LF,"Shaking the door knob reveal that it's locked. Off to the left is an garage.",0
000567  1  61 6B 69 6E  
00056B  1  67 20 74 68  
0005B2  1               
0005B2  1  59 6F 75 20  @t3:        .byte "You walk into the garage to see an old Volkswagen Karmann Ghia covered in dust."
0005B6  1  77 61 6C 6B  
0005BA  1  20 69 6E 74  
000601  1  0D 0A 41 74              .byte CR,LF,"At the back is a bench with broken car parts."
000605  1  20 74 68 65  
000609  1  20 62 61 63  
000630  1  0D 0A 59 6F              .byte CR,LF,"You go closer to see a jar full of bolts... Shining in it is a key!",0
000634  1  75 20 67 6F  
000638  1  20 63 6C 6F  
000676  1               
000676  1  41 66 74 65  @t4:        .byte "After opening the door with hesitation, you're in an untidy living room."
00067A  1  72 20 6F 70  
00067E  1  65 6E 69 6E  
0006BE  1  0D 0A 54 4F              .byte CR,LF,"TODO says the ghost! Oooohohhohohoo!", 0
0006C2  1  44 4F 20 73  
0006C6  1  61 79 73 20  
0006E5  1               
0006E5  1  44 6F 6F 72  @e1:        .byte "Door is locked, you need to USE a key!",0
0006E9  1  20 69 73 20  
0006ED  1  6C 6F 63 6B  
00070B  1               
