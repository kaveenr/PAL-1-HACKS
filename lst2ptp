#!/usr/bin/python3
import argparse
import re

# APPENDIX F - PAPER TAPE FORMAT (KIM-1 User Manual)
#
#      The paper tape LOAD and DUMP routines store and retrieve data in
# a specific format designed to insure error free recovery.  Each byte
# of data to be stored is converted to two half bytes.  The half bytes
# (whose possible values are 0 to FHEX) are translated into their ASCII
# equivalents and written out onto paper tape in this form.
# 
#      Each record outputted begins with a ";" character (ASCII 3B) to
# mark the start of a valid record.  The next byte transmitted (18HEX) or
# (2410) is the number of data bytes contained in the record.  The record's
# starting address High (1 byte, 2 characters), starting address Lo (1 byte,
# 2 characters), and data (24 bytes, 48 characters) follow.  Each record is
# terminated by the record's check-sum (2 bytes, 4 characters), a carriage
# return (ASCII OD), line feed (ASCII øA), and six "NULL" characters
# (ASCII øø).
# 
#      The last record transmitted has zero data bytes (indicated by ;00)
# The starting address field is replaced by a four digit Hex number repre-
# senting the total number of data records contained in the transmission,
# followed by the records usual check-sum digits.  A "XOFF" character ends
# the transmission.
#
#
# ;180000FFEEDDCCBBAA0099887766554433221122334455667788990AFC
# ;0000010001
#

#
# Regex Compliation
#
valid = re.compile('[0123456789ABCDEF]+')

#
# Argparser Configuration
#
parser = argparse.ArgumentParser(description='Process CC65 List To PTP')
parser.add_argument('file', metavar='F', type=str, help='input list file')
args = parser.parse_args()
infile = args.file

#
# Parse Listing To Memory Map
#
contents = {}
for raw_line in open(infile, 'rt'):
    parts = raw_line[0:24].split()
    if len(parts) < 3 : continue
    if not valid.match(parts[0]): continue
    
    try: address = int(parts[0], 16)
    except ValueError: continue
    
    # print(address,  end=" ")
    for part in parts[2::]:
        if not valid.match(part): continue
        try:value = int(part, 16)
        except ValueError: continue
        contents[address] = value
        address+=1
        # print(value,  end=" ")
    # print()
    # print(raw_line.strip())

#
# Chunk Memory Map Into Areas 
#
min_addr, max_addr = min(contents.keys()), max(contents.keys())
chunks = {}
cur_chunk_addr = None
cur_chunk = []
for addr in range(min_addr, max_addr+1):
    if (cur_chunk_addr is None): cur_chunk_addr = addr
    if (addr in contents): 
        cur_chunk.append(contents[addr])
    else:
        chunks[cur_chunk_addr] = cur_chunk
        cur_chunk_addr = None
        cur_chunk = []
if cur_chunk_addr is not None: chunks[cur_chunk_addr] = cur_chunk
    
#
# Print to file
#
RECORD_SIZE = 24
records = []
for start_addr, chunk in chunks.items():
    in_chunk = list(zip(*[iter(chunk)]*RECORD_SIZE))
    for record in in_chunk:
        cur_record = ";{:02x}".format(RECORD_SIZE).upper()
        cur_record += '{:04x}'.format(start_addr).upper()
        for byte in record:
            cur_record += '{:02x}'.format(byte).upper()
        start_addr += len(record)
        print(cur_record)